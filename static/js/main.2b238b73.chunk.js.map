{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Book","_this$props$book","this","props","book","title","link","image_url","authors","react_default","a","createElement","className","href","src","alt","author","name","Component","Shelf","books","shelf","map","id","App_Book","key","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","response","json","setState","catch","error","console","role","aria-label","App_Shelf","current","read","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAGMA,0LACK,IAAAC,EACqCC,KAAKC,MAAMC,KAA/CC,EADDJ,EACCI,MAAOC,EADRL,EACQK,KAAMC,EADdN,EACcM,UAAWC,EADzBP,EACyBO,QAEhC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAMP,EAAMD,MAAOA,GACpBI,EAAAC,EAAAC,cAAA,OAAKG,IAAKP,EAAWQ,IAAKV,KAE5BI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAMP,GAAOD,IAElBI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZJ,EAAQQ,OAAOC,cAbPC,cAoBbC,mLACK,IACCC,EAAUlB,KAAKC,MAAMkB,MAArBD,MAER,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZQ,EAAME,IAAI,SAAClB,EAAMmB,GAAP,OACTd,EAAAC,EAAAC,cAACa,EAAD,CAAMpB,KAAMA,EAAKA,KAAMqB,IAAKF,cAPlBL,aAoDLQ,cArCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA1B,KAAAwB,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAA1B,KAAA0B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA9B,QACK+B,MAAQ,CACXZ,OAAO,GAHGM,mFAOM,IAAAO,EAAAhC,KAClBiC,MAAM,4CACHC,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAAAC,GACJH,EAAKK,SAAS,CACZlB,MAAOgB,MAGVG,MAAM,SAACC,GACNC,QAAQD,MAAMA,sCAKlB,OACEhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,mCACkCH,EAAAC,EAAAC,cAAA,QAAMgC,KAAK,MAAMC,aAAW,QAA5B,iBAElCnC,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,qBACCV,KAAK+B,MAAMZ,MAAQZ,EAAAC,EAAAC,cAACkC,EAAD,CAAOxB,MAAOnB,KAAK+B,MAAMZ,MAAMyB,UAAc,GACjErC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,QACCV,KAAK+B,MAAMZ,MAAQZ,EAAAC,EAAAC,cAACkC,EAAD,CAAOxB,MAAOnB,KAAK+B,MAAMZ,MAAM0B,OAAW,YA/BtD7B,aCzBE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.2b238b73.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Book extends Component {\n  render() {\n    const { title, link, image_url, authors } = this.props.book;\n\n    return (\n      <div className=\"book\">\n        <a href={link} title={title}>\n          <img src={image_url} alt={title} />\n        </a>\n        <div className=\"title\">\n          <a href={link}>{title}</a>\n        </div>\n        <div className=\"author\">\n          {authors.author.name}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Shelf extends Component {\n  render() {\n    const { books } = this.props.shelf;\n\n    return (\n      <div className=\"shelf\">\n        {books.map((book, id) => (\n          <Book book={book.book} key={id} />\n        ))}\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      shelf: false\n    };\n  }\n  \n  componentDidMount() {\n    fetch('https://goodreads-shelves.herokuapp.com/')\n      .then((response) => response.json())\n      .then(response => {\n        this.setState({\n          shelf: response\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Dunnkers' Digital Reading Shelf <span role=\"img\" aria-label=\"Book\">ðŸ“™</span>\n        </header>\n        <section>\n          <h2 className=\"shelf-header\">Currently reading</h2>\n          {this.state.shelf ? <Shelf shelf={this.state.shelf.current} /> : ''}\n          <h2 className=\"shelf-header\">Read</h2>\n          {this.state.shelf ? <Shelf shelf={this.state.shelf.read} /> : ''}\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}